// instruction.h

// Author: tommojphillips
// GitHub: https:\\github.com\tommojphillips

#ifndef X86_INSTRUCTION_H
#define X86_INSTRUCTION_H

#include <stdint.h>

#include "type_defs.h"

// opcode byte
typedef struct _X86_OPCODE {
	BYTE size		: 1;
	BYTE direction	: 1;
	BYTE op			: 6;
} X86_OPCODE;

// r/m byte
typedef struct _X86_MOD_RM {
	BYTE rm		: 3;
	BYTE reg	: 3;
	BYTE mod	: 2;
} X86_MOD_RM;

// sib byte
typedef struct _X86_SIB {
	BYTE base	: 3;
	BYTE index	: 3;
	BYTE scale	: 2;
} X86_SIB;

typedef enum _X86_CONDITIONAL_TEST_ENCODING {
	CONDITIONAL_TEST_OVERFLOW = 0b0000,
	CONDITIONAL_TEST_NO_OVERFLOW = 0b0001,
	CONDITIONAL_TEST_CARRY = 0b0010,
	CONDITIONAL_TEST_NOT_CARRY = 0b0011,
	CONDITIONAL_TEST_EQUAL_ZERO = 0b0100,
	CONDITIONAL_TEST_NOT_EQUAL_ZERO = 0b0101,
	CONDITIONAL_TEST_BELOW_OR_EQUAL = 0b0110,
	CONDITIONAL_TEST_ABOVE = 0b0111,
	CONDITIONAL_TEST_SIGN = 0b1000,
	CONDITIONAL_TEST_NOT_SIGN = 0b1001,
	CONDITIONAL_TEST_PARITY = 0b1010,
	CONDITIONAL_TEST_NOT_PARITY = 0b1011,
	CONDITIONAL_TEST_LESS = 0b1100,
	CONDITIONAL_TEST_NOT_LESS = 0b1101,
	CONDITIONAL_TEST_LESS_OR_EQUAL = 0b1110,
	CONDITIONAL_TEST_NOT_LESS_OR_EQUAL = 0b1111,
} X86_CONDITIONAL_TEST_ENCODING;

// instruction type
typedef enum _INSTRUCTION_TYPE {
	INSTRUCTION_TYPE_UNK,
	INSTRUCTION_TYPE_ADD,
	INSTRUCTION_TYPE_SUB,
	INSTRUCTION_TYPE_XOR,
	INSTRUCTION_TYPE_OR,
	INSTRUCTION_TYPE_AND,
	INSTRUCTION_TYPE_MOV,
	INSTRUCTION_TYPE_CMP,
	INSTRUCTION_TYPE_INC,
	INSTRUCTION_TYPE_DEC,
} INSTRUCTION_TYPE;

typedef enum _INSTRUCTION_RM {
	INSTRUCTION_RM_UNK,
	INSTRUCTION_RM_REG,
	INSTRUCTION_RM_MEM,
	INSTRUCTION_RM_IMM,
} INSTRUCTION_RM;

#endif
